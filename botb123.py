from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, BigInteger
from sqlalchemy.orm import sessionmaker, relationship, declarative_base
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters,
                          CallbackQueryHandler, ConversationHandler)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta, date, time
from apscheduler.schedulers.background import BackgroundScheduler
import logging
import pytz
from pytz import timezone
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Border, Side
import random
from functools import partial

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='myapp.log', level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logging.disable(logging.CRITICAL)
# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_engine('mysql+pymysql://root:123@localhost/botdb',
                       pool_size=20,  # increases the number of persistent connections to 20
                       max_overflow=40  # allows up to 40 additional connections beyond the pool_size
                       )

Session = sessionmaker(bind=engine)
Base = declarative_base()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
class Chat(Base):
    __tablename__ = 'chats'
    id = Column(BigInteger, primary_key=True)
    start_date = Column(String(255))


class ChatMember(Base):
    __tablename__ = 'members'
    id = Column(Integer, primary_key=True)
    chat_id = Column(BigInteger, ForeignKey('chats.id', ondelete='CASCADE'))
    user_id = Column(BigInteger, nullable=False)
    user_name = Column(String(255))
    full_name = Column(String(255))


class DailyRecord(Base):
    __tablename__ = 'daily_records'
    id = Column(Integer, primary_key=True)
    chat_member_id = Column(Integer, ForeignKey('members.id', ondelete='CASCADE'))
    date = Column(String(255))
    morning_hashtag = Column(String(255), default=False)
    evening_hashtag = Column(String(255), default=False)
    week_hashtag = Column(String(255), default=False)


class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    chat_id = Column(BigInteger, unique=True, nullable=False)
    morning_hashtag = Column(String(255), default="#–æ—É")
    evening_hashtag = Column(String(255), default="#–æ–≤")
    week_hashtag = Column(String(255), default="#–Ω–µ–¥–µ–ª—è")
    morning_deadline = Column(String(255), default="10:00")
    evening_deadline = Column(String(255), default="23:59")
    start_date = Column(String(255), nullable=True)


class UserState(Base):
    __tablename__ = 'user_states'
    id = Column(Integer, primary_key=True)
    chat_id = Column(BigInteger, nullable=False)
    user_id = Column(BigInteger, nullable=False)
    state = Column(String(255))
    data = Column(String(255), nullable=True)


class Fine(Base):
    __tablename__ = 'fines'
    id = Column(Integer, primary_key=True)
    chat_member_id = Column(Integer, ForeignKey('members.id'))
    date_paid = Column(String(255))
    report_type = Column(String(255))
    fine_amount = Column(Integer, nullable=True)


Base.metadata.create_all(engine)


def get_settings(chat_id):
    session = Session()
    session.close()
    return session.query(Settings).filter_by(chat_id=chat_id).first() or Settings()


def is_admin(user_id, chat_id, bot):
    try:
        chat_administrators = bot.get_chat_administrators(chat_id)
        return any(admin.user.id == user_id for admin in chat_administrators)
    except:
        return False


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
def update_daily_record(chat_id, user_id, date, morning_hashtag=None, evening_hashtag=None, week_hashtag=None):
    session = Session()
    member = session.query(ChatMember).filter_by(chat_id=chat_id, user_id=user_id).first()

    if member:
        record = session.query(DailyRecord).filter_by(chat_member_id=member.id, date=date).first()
        if not record:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å —É—Ç—Ä–µ–Ω–Ω–∏–º, –≤–µ—á–µ—Ä–Ω–∏–º –∏ –Ω–µ–¥–µ–ª—å–Ω—ã–º —Ö–µ—à—Ç–µ–≥–∞–º–∏
            record = DailyRecord(chat_member_id=member.id, date=date,
                                 morning_hashtag='1' if morning_hashtag else '0',
                                 evening_hashtag='1' if evening_hashtag else '0',
                                 week_hashtag='1' if week_hashtag else '0')
            session.add(record)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ö–µ—à—Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if morning_hashtag is not None:
                record.morning_hashtag = '1' if morning_hashtag else '0'
            if evening_hashtag is not None:
                record.evening_hashtag = '1' if evening_hashtag else '0'
            if week_hashtag is not None:
                record.week_hashtag = '1' if week_hashtag else '0'

        session.commit()
    session.close()


def create_user_mention(user_name, user_id, full_name):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω user_name –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if user_name and user_name.strip() != "":
        return f"@{user_name}"
    else:
        # –ï—Å–ª–∏ user_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        return f"<a href='tg://user?id={user_id}'>{full_name}</a>"


def check_reports_and_notify(bot):
    logger.info("check_reports_and_notify: –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏")
    session = Session()
    current_time = datetime.now(pytz.timezone('Europe/Moscow'))
    today_date = current_time.date()
    is_weekday_sunday = current_time.weekday() == 6
    is_morning = current_time.time() < time(12, 0, 0)
    print(is_morning)

    logger.info(f"Function check_reports_and_notify started for {today_date}")

    chats = session.query(Chat).all()
    for chat in chats:
        logger.info(f"check_reports_and_notify: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞")
        chat_id = chat.id
        late_users_morning = []
        late_users_evening = []
        late_users_week = []

        logger.info(f"Processing chat: {chat_id}")
        try:
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞: {}".format(chat_id))
            members = session.query(ChatMember).filter_by(chat_id=chat_id).all()
            for member in members:
                logger.info(f"check_reports_and_notify: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.user_id} –≤ —á–∞—Ç–µ {chat_id}")
                record = session.query(DailyRecord).filter_by(chat_member_id=member.id, date=today_date).first()

                if is_morning and not is_weekday_sunday:
                    if not record or record.morning_hashtag == "0":
                        user_mention = create_user_mention(member.user_name, member.user_id, member.full_name)
                        late_users_morning.append(user_mention)

                if not is_morning and not is_weekday_sunday:
                    if not record or record.evening_hashtag == "0":
                        user_mention = create_user_mention(member.user_name, member.user_id, member.full_name)
                        late_users_evening.append(user_mention)

                if is_weekday_sunday and (not record or record.week_hashtag == "0"):
                    user_mention = create_user_mention(member.user_name, member.user_id, member.full_name)
                    late_users_week.append(user_mention)


            praise_messages = [
                "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à–∏ –æ—Ç—á—ë—Ç—ã —Å–∏—è—é—Ç –∫–∞–∫ –∑–≤—ë–∑–¥—ã –≤ –Ω–æ—á–Ω–æ–º –Ω–µ–±–µ! üåü",
                "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —É—Å–ø–µ—Ö! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç –≤–∞—à—É —Å—Ç—Ä–∞—Å—Ç—å –∏ —É–ø–æ—Ä—Å—Ç–≤–æ. üí™",
                "–ë—Ä–∞–≤–æ! –ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á—ë—Ç - —ç—Ç–æ —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ –≤–µ–ª–∏—á–∏—é. üöÄ",
                "–í—ã –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ –º–∞—Å—Ç–µ—Ä–∞ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è. üëè",
                "–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É—é—Ç –æ –≤–∞—à–µ–º —Ç–∞–ª–∞–Ω—Ç–µ –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏–∏. üëå",
                "–í—ã –ø—Ä–µ–≤–∑–æ—à–ª–∏ —Å–∞–º–∏ —Å–µ–±—è! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞. üé®",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –∫–∞–∫ –º—É–∑—ã–∫–∞ –¥–ª—è —É—à–µ–π, –ø–æ–ª–Ω—ã–µ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞. üé∂",
                "–ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á—ë—Ç - —ç—Ç–æ –æ—á–µ—Ä–µ–¥–Ω–æ–π —à–µ–¥–µ–≤—Ä! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ. üåà",
                "–í–∞—à —Ç—Ä—É–¥ –Ω–µ –æ—Å—Ç–∞–ª—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º. –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –ø—Ä–∏–º–µ—Ä –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. üèÖ",
                "–í—ã - –∑–≤–µ–∑–¥–∞! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –æ–∑–∞—Ä—è—é—Ç –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É. ‚ú®",
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç –≤–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ä–∞–Ω–∏–µ. üåü",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –æ–ª–∏—Ü–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞ –∏ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –¥–µ—Ç–∞–ª—è–º. üíº",
                "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç –æ–∂–∏–¥–∞–Ω–∏—è. üöÄ",
                "–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å –≤–∞—à–∏–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏. –ë—Ä–∞–≤–æ! üëç",
                "–ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á—ë—Ç - —ç—Ç–æ –ø—É—Ç–µ–≤–æ–¥–Ω–∞—è –∑–≤–µ–∑–¥–∞ –∫ –º–µ—á—Ç–∞–º –∏ –∞–º–±–∏—Ü–∏—è–º. üå†",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è –≥–ª–∞–∑ –∏ —É–º–∞. –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üéâ",
                "–í—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç–µ –Ω–∞—Å –≤—Å–µ—Ö! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –ø—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏. üíñ",
                "–í–∞—à–µ —É—Å–µ—Ä–¥–∏–µ –≤ –æ—Ç—á–µ—Ç–∞—Ö –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —Å–∞–º—ã—Ö –≤—ã—Å–æ–∫–∏—Ö –ø–æ—Ö–≤–∞–ª. –í–ø–µ—á–∞—Ç–ª—è—é—â–µ! üëè",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –∫–∞–∫ —Å–≤–µ–∂–∏–π –≤–µ—Ç–µ—Ä, –ø—Ä–∏–Ω–æ—Å—è—â–∏–π –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã. üå¨Ô∏è",
                "–í—ã —Å–∏—è–µ—Ç–µ —è—Ä—á–µ –≤—Å–µ—Ö! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞. üåü",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –æ–∑–∞—Ä—è—é—Ç –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É, –∫–∞–∫ —Å–æ–ª–Ω—Ü–µ –æ—Å–≤–µ—â–∞–µ—Ç —É—Ç—Ä–æ. ‚òÄÔ∏è",
                "–¢–∞–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –ø—Ä–∏–º–µ—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏. üé®",
                "–í—ã - –∏—Å—Ç–∏–Ω–Ω—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª–∏! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –Ω–∞ —á—Ç–æ –≤—ã —Å–ø–æ—Å–æ–±–Ω—ã. üåà",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –º–æ—Å—Ç –≤ –±—É–¥—É—â–µ–µ –ø–æ–ª–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Å–ø–µ—Ö–æ–≤. üåâ",
                "–í—ã –¥–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–µ—Ç. –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. üí™",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –ø–µ—Å–Ω—è —É—Å–ø–µ—Ö–∞, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏–µ–π –∏ –º–µ–ª–æ–¥–∏–µ–π. üéµ",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –ª–µ–≥–µ–Ω–¥–∞ –æ –≤–∞—à–µ–º —Ç—Ä—É–¥–µ –∏ —Å—Ç–∞—Ä–∞–Ω–∏–∏. –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ! üèÜ",
                "–¢–∞–∫–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –ø—Ä–∏–º–µ—Ä –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã. üîç",
                "–í—ã - –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥—É—Ö–∞. üí´",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –∫–∞–∫ –º–∞—è–∫, –æ—Å–≤–µ—â–∞—é—â–∏–π –ø—É—Ç—å –∫ —Ü–µ–ª–∏. –ë–ª–µ—Å—Ç—è—â–µ! üö©",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞. üó∫Ô∏è",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –ø–æ—ç–∑–∏—è —É—Å–ø–µ—Ö–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –≤–∞—à–∏–º–∏ —Ä—É–∫–∞–º–∏. üìú",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –º–æ–∑–∞–∏–∫–∞ —É—Å–ø–µ—Ö–∞, —Å–æ–±—Ä–∞–Ω–Ω–∞—è –∏–∑ –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞. üé≠",
                "–í—ã - —á–µ–º–ø–∏–æ–Ω –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö - —Ç—Ä–∏—É–º—Ñ —É—Å–µ—Ä–¥–∏—è! üèÜ",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –∫–∞–∫ –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å–∏–º—Ñ–æ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥–∞—è –Ω–æ—Ç–∞ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ. üéº",
                "–í—ã —Ä–∞–∑–≥–∞–¥–∞–ª–∏ –∫–æ–¥ —É—Å–ø–µ—Ö–∞! –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ —à–∏—Ñ—Ä —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞. üóùÔ∏è",
                "–ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á–µ—Ç - –∫–∞–∫ –∫–∞–ø–ª—è –≤ –æ–∫–µ–∞–Ω–µ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! üíß",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ —Å–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ –≤ –º–∏—Ä–µ —Ä–∞–±–æ—Ç—ã. –ó–∞–≤–æ—Ä–∞–∂–∏–≤–∞—é—â–µ! üåå",
                "–í—ã –≤–æ–ø–ª–æ—Ç–∏–ª–∏ –≤–∞—à–∏ –º–µ—á—Ç—ã –≤ –∫–∞–∂–¥–æ–º –æ—Ç—á–µ—Ç–µ. –í–∞—à–∏ —É—Å–∏–ª–∏—è –Ω–µ –∑—Ä—è! üí≠",
                "–í—ã –≤–∑–ª–µ—Ç–µ–ª–∏ –∫ –≤–µ—Ä—à–∏–Ω–∞–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –≤ –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö. –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! üöÄ",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –æ–∞–∑–∏—Å –≤ –ø—É—Å—Ç—ã–Ω–µ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç–∏. –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ! üå¥",
                "–í—ã –ø–∏—à–µ—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —É—Å–ø–µ—Ö–∞ —Å –∫–∞–∂–¥—ã–º –æ—Ç—á–µ—Ç–æ–º. –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ! üìö",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –∫–∞–∫ –∑–µ—Ä–∫–∞–ª–æ –≤–∞—à–µ–π –¥—É—à–∏, –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ –≤–∞—à–∏ —É—Å–∏–ª–∏—è. üó∫Ô∏è",
                "–ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á–µ—Ç - —ç—Ç–æ –∫–∏—Ä–ø–∏—á–∏–∫ –≤ —Å—Ç–µ–Ω–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞. üß±",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –∫–∞–∫ –≤—Å–ø—ã—à–∫–∞ —Å–≤–µ—Ç–∞ –≤ —Ç–µ–º–Ω–æ—Ç–µ, –æ—Å–≤–µ—â–∞—é—â–∞—è –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É. üí°",
                "–í—ã - –º–∞—ç—Å—Ç—Ä–æ –≤ –º–∏—Ä–µ –æ—Ç—á–µ—Ç–æ–≤. –í–∞—à–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–∞–µ—Ç! üéª",
                "–ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á–µ—Ç - —ç—Ç–æ –æ—Ç–≥–æ–ª–æ—Å–æ–∫ –≤–∞—à–µ–≥–æ –Ω–µ—É—Ç–æ–º–∏–º–æ–≥–æ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É. üåü",
                "–í—ã - –∞–ª—Ö–∏–º–∏–∫–∏ —É—Å–ø–µ—Ö–∞, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∏–µ –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç –≤ –∑–æ–ª–æ—Ç–æ. üß™",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ —Ç–∞–Ω–µ—Ü —Å–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä, —Å–æ–∑–¥–∞—é—â–∏–π –≥–∞—Ä–º–æ–Ω–∏—é —É—Å–ø–µ—Ö–∞. üíÉ",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –≥–∏–º–Ω –≤–∞—à–µ–º—É —É–ø–æ—Ä—Å—Ç–≤—É –∏ —Ç–∞–ª–∞–Ω—Ç—É. –ù–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω–æ! üéµ",
                "–í—ã —Ä–∏—Å—É–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É —Å–≤–æ–µ–≥–æ —É—Å–ø–µ—Ö–∞ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç. –í–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç–µ! üñºÔ∏è",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –∫–∞–∫ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å –ª—é–±–æ–≤—å—é –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ–º. üç≥",
                "–ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á–µ—Ç - —ç—Ç–æ —à–∞–≥ –∫ –≤–µ—Ä—à–∏–Ω–µ –≤–∞—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –í–æ—Å—Ö–∏—â–∞—é—Å—å –≤–∞–º–∏! üèîÔ∏è",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –∫–∞–∫ —Ä–∞—Å—Å–≤–µ—Ç –Ω–æ–≤–æ–≥–æ –¥–Ω—è, –ø–æ–ª–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. üåÖ",
                "–í—ã - –º–∞—Å—Ç–µ—Ä —Å–ª–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞. –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –≤–∞—à–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ. üìñ",
                "–ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á–µ—Ç - —ç—Ç–æ –≤–æ–ª–Ω–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –û—Ç–ª–∏—á–Ω–æ! üåä",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –ø—É—Ç–µ–≤–æ–¥–Ω—ã–π —Å–≤–µ—Ç –≤ –º–∏—Ä–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. üî¶",
                "–í—ã - –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –≤–∞—à–µ–≥–æ —É—Å–ø–µ—Ö–∞, –∞ –≤–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ –µ–≥–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç. üèóÔ∏è",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - —ç—Ç–æ —Å–∞–¥ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç–æ–∫ - —ç—Ç–æ –≤–∞—à —Ç—Ä—É–¥. üå∫",
                "–í—ã –≤–¥—ã—Ö–∞–µ—Ç–µ –∂–∏–∑–Ω—å –≤ –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç, –¥–µ–ª–∞—è –µ–≥–æ –∂–∏–≤—ã–º –∏ –¥–∏–Ω–∞–º–∏—á–Ω—ã–º. üçÉ",
                "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã - –∫–∞–∫ —Ä–∞–¥—É–≥–∞ –ø–æ—Å–ª–µ –¥–æ–∂–¥—è, –ø–æ–ª–Ω–∞—è –Ω–∞–¥–µ–∂–¥—ã –∏ —Å–≤–µ—Ç–∞. üåà",
                "–í—ã - —Ä—ã—Ü–∞—Ä–∏ –Ω–∞ –ø–æ–ª—è—Ö –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏, —Å—Ä–∞–∂–∞—é—â–∏–µ—Å—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å. üõ°Ô∏è",
                "–ö–∞–∂–¥—ã–π –≤–∞—à –æ—Ç—á–µ—Ç - —ç—Ç–æ –∑–≤–µ–∑–¥–æ–ø–∞–¥ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –æ—Å–≤–µ—â–∞—é—â–∏–π –ø—É—Ç—å –¥—Ä—É–≥–∏–º. ‚ú®"
            ]
            random_praise = random.choice(praise_messages)

            if not is_weekday_sunday:
                if is_morning and late_users_morning:
                    send_notification(bot, chat_id, late_users_morning, "—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç")
                    logger.info(f"check_reports_and_notify: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö –≤ —á–∞—Ç {chat_id}")
                else:
                    logger.info(f"No late users for morning report in chat {chat_id}")
                if late_users_evening and not is_morning:
                    send_notification(bot, chat_id, late_users_evening, "–≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç")
                    logger.info(f"check_reports_and_notify: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≤–µ—á–µ—Ä–Ω–∏—Ö –æ—Ç—á–µ—Ç–∞—Ö –≤ —á–∞—Ç {chat_id}")
                else:
                    logger.info(f"No late users for evening report in chat {chat_id}")

            if is_weekday_sunday and late_users_week:
                send_notification(bot, chat_id, late_users_week, "–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç")
                logger.info(f"check_reports_and_notify: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö –≤ —á–∞—Ç {chat_id}")
            else:
                logger.info(f"No late users for weekly report in chat {chat_id}")

            if not is_weekday_sunday:
                if is_morning and not late_users_morning:
                    bot.send_message(chat_id=chat_id,
                                     text="–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –≤–æ–≤—Ä–µ–º—è. –ú–æ–ª–æ–¥—Ü—ã! " + random_praise)
                    logger.info(f"All morning reports submitted on time in chat {chat_id}")
                if not is_morning and not late_users_evening:
                    bot.send_message(chat_id=chat_id,
                                     text="–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ –≤–µ—á–µ—Ä–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –≤–æ–≤—Ä–µ–º—è. –ú–æ–ª–æ–¥—Ü—ã! " + random_praise)
                    logger.info(f"All evening reports submitted on time in chat {chat_id}")
            if is_weekday_sunday:
                if not late_users_week:
                    bot.send_message(chat_id=chat_id,
                                     text="–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–∞–ª–∏ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤–æ–≤—Ä–µ–º—è. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! " + random_praise)
                    logger.info(f"All weekly reports submitted on time in chat {chat_id}")
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞: {}".format(chat_id))
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {}: {}".format(chat_id, str(e)))

    session.close()
    logger.info("Function check_reports_and_notify completed")


def send_notification(bot, chat_id, user_list, report_type):
    session = Session()
    chat = session.query(Chat).filter(Chat.id == chat_id).first()
    if chat and user_list:
        current_date = datetime.now().date()
        start_date = datetime.strptime(chat.start_date, "%Y-%m-%d").date()
        days_since_start = (current_date - start_date).days

        if days_since_start >= 5:
            late_message_variants = [
                "–í—ã —Å–µ–≥–æ–¥–Ω—è, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞, –±—ã–ª–∏ —Ç–∞–∫ –∑–∞–Ω—è—Ç—ã –ø–æ–∫–æ—Ä–µ–Ω–∏–µ–º –º–∏—Ä–∞ —Å–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç–æ–π, —á—Ç–æ –∑–∞–±—ã–ª–∏ —Å–¥–∞—Ç—å  "
                "–æ—Ç—á—ë—Ç. C–æ–∏–∑–≤–æ–ª—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Ç–∞–∫ –∂–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –ø–æ–º–æ—â—å –Ω—É–∂–¥–∞—é—â–∏–º—Å—è –≤ –í–∞—à–µ–º –≤–Ω–∏–º–∞–Ω–∏–∏ üíñ",
                "–í–∞—à–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è, –±–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è, –±—ã–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –º–∞–ª–µ–Ω—å–∫–∏—Ö "
                "–ø–æ–±–µ–¥–∞—Ö –≤ –≤–∏–¥–µ —Å–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ üåü",
                "–ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –±—ã–ª –¥–µ–Ω—å –ø–æ–ª–Ω—ã–π —á—É–¥–µ—Å –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–∏–º –æ—Ç—á—ë—Ç ‚ú®",
                "–í–∞—à–∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –≤–∏–¥–∏–º–æ, –æ—Ç–Ω—è–ª–∏ –≤—Å–µ –≤—Ä–µ–º—è. –ù–æ –Ω–µ —É–ø—É—Å–∫–∞–π—Ç–µ –º–æ–º–µ–Ω—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ "
                "—Å–≤–æ–∏–º–∏ "
                "—É—Å–ø–µ—Ö–∞–º–∏ –≤ –æ—Ç—á—ë—Ç–µ üöÄ",
                "–í–∞—à–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º —Å–µ–≥–æ–¥–Ω—è, –∫–∞–∂–µ—Ç—Å—è, –ø–æ–¥–≤–µ–ª–æ. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –Ω–∞–π—Ç–∏ –º–∏–Ω—É—Ç–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–∞ üòä",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Ç–≤–æ—Ä–∏–ª–∏ —á—É–¥–µ—Å–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –º–∞–≥–∏–∏ –æ—Ç—á—ë—Ç–∞. –ú–æ–∂–µ—Ç, –≤–∞—à–∏ —á—É–¥–µ—Å–∞ –ø—Ä–∏–Ω–µ—Å—É—Ç "
                "—Ä–∞–¥–æ—Å—Ç—å "
                "–Ω–µ —Ç–æ–ª—å–∫–æ –≤–∞–º, –Ω–æ –∏ –∫–æ–º—É-—Ç–æ –µ—â–µ? üåü‚ú®",
                "–í—ã, –∫–∞–∫ –≤–æ–ª—à–µ–±–Ω–∏–∫, —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∏ –∑–∞–Ω—è—Ç—ã —Å–æ–∑–¥–∞–Ω–∏–µ–º —á—É–¥–µ—Å, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –æ—Ç—á—ë—Ç ‚Äì —ç—Ç–æ –µ—â–µ –æ–¥–Ω–æ "
                "–≤–æ–ª—à–µ–±—Å—Ç–≤–æ. –ò –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ –º–∞–ª–µ–Ω—å–∫–æ–º –≤–∫–ª–∞–¥–µ –≤ –±–æ–ª—å—à–æ–µ –¥–µ–ª–æ! üé©üåà",
                "–í–∞—à–∏ –≥–µ—Ä–æ–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞. –ù–æ –ø–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π "
                "–≤–∫–ª–∞–¥ –≤ "
                "–æ—Ç—á—ë—Ç - —ç—Ç–æ —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ! üöÄüí´",
                "–ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è –≤—ã –±—ã–ª–∏ –∑–∞–Ω—è—Ç—ã –ø–æ–∫–æ—Ä–µ–Ω–∏–µ–º –º–∏—Ä–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–∞—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ –æ—Ç—á—ë—Ç, "
                "–∏ –æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∂–µ—Å—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–Ω–∞—á–∏—Ç—å –º–Ω–æ–≥–æ! üåç‚ù§Ô∏è",
                "–í–∞—à–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è, –±–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è, –±—ã–ª–∞ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –≤–æ–ª—à–µ–±—Å—Ç–≤–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –≤–µ—â–µ–π, "
                "–∫–∞–∫ —Å–¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã. –í–µ–¥—å –æ–Ω–∏ —Ç–æ–∂–µ –ø–æ–º–æ–≥–∞—é—Ç –¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ! üåü",
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞—à –¥–µ–Ω—å –±—ã–ª –Ω–∞–ø–æ–ª–Ω–µ–Ω —á—É–¥–µ—Å–∞–º–∏, –Ω–æ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä –æ—Ç—á—ë—Ç–æ–≤ —Ç–æ–∂–µ –∂–¥–∞–ª –≤–∞—à–µ–≥–æ –≤–∫–ª–∞–¥–∞. –ü–æ–¥–∞—Ä–∏—Ç–µ "
                "–∏–º "
                "—á–∞—Å—Ç–∏—á–∫—É –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è! ‚ú®",
                "–í–∞—à–∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –≤–∏–¥–∏–º–æ, –∑–∞–±—Ä–∞–ª–∏ –≤—Å–µ –≤—Ä–µ–º—è. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Å–ª–µ–¥ –≤ "
                "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º –≤–∫–ª–∞–¥–µ! üöÄ",
                "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –≤–µ—Ä–æ—è—Ç–Ω–æ, –±—ã–ª –ø–æ–ª–æ–Ω —Å–æ–±—ã—Ç–∏–π, –Ω–æ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ –º–∞–ª–µ–Ω—å–∫–æ–º, –Ω–æ –≤–∞–∂–Ω–æ–º –≤–∫–ª–∞–¥–µ –≤ –Ω–∞—à "
                "–æ–±—â–∏–π "
                "–º–∏—Ä. üòä",
                "–í–∞—à–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å–µ–≥–æ–¥–Ω—è –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–± –æ—Ç—á—ë—Ç–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –≤–æ–ª—à–µ–±—Å—Ç–≤–æ–º –≤ –Ω–∞—à–µ–º "
                "–æ–±—â–µ–º —Å—É–Ω–¥—É—á–∫–µ "
                "–¥–æ–±—Ä—ã—Ö –¥–µ–ª! üåà",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, —Å–ø–∞—Å–∞–ª–∏ –º–∏—Ä! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –µ—â—ë –∏ –º–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ —Å–¥–µ–ª–∞—Ç—å. üåç",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –ø–æ–ª–æ–Ω –≥–µ—Ä–æ–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–∏–º –µ—â—ë –æ–¥–Ω–æ ‚Äî –≤–∞—à "
                "–≤–∫–ª–∞–¥ –≤ –Ω–∞—à—É –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é. ü¶∏‚Äç‚ôÇ",
                "–í—ã, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, –±–ª–µ—Å—Ç—è—â–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –∑–∞–¥–∞—á–∞–º–∏! –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∏—Ö –≤ –æ—Ç—á—ë—Ç–µ –∏ "
                "–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Å–ª–µ–¥ –≤ —Ñ–æ–Ω–¥–µ –¥–æ–±—Ä—ã—Ö –¥–µ–ª. "
                "üí´",
                "–í—ã —Å–µ–≥–æ–¥–Ω—è, –∫–∞–∫ –≤–æ–ª—à–µ–±–Ω–∏–∫, —Ç–≤–æ—Ä–∏–ª–∏ —á—É–¥–µ—Å–∞! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ª—à–µ–±–Ω—ã–π —à—Ç—Ä–∏—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é "
                "–¥–æ–±—Ä—ã—Ö "
                "–¥–µ–ª. üßô‚Äç‚ôÇÔ∏è",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –ø–æ–ª–æ–Ω –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–∞–∑–Ω–µ "
                "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π. üöÄ",
                "–í—ã —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∏, –∫–∞–∫ —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π, –≤–µ–∑–¥–µ –∏ –≤—Å—é–¥—É! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —á–∞—Å—Ç–∏—Ü–µ–π –≤–∞—à–µ–π —Å—É–ø–µ—Ä—Å–∏–ª—ã —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–æ–±—Ä—ã—Ö "
                "–¥–µ–ª. ü¶∏‚Äç‚ôÄÔ∏è",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞, —Ç–≤–æ—Ä–∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π —Å —Ñ–æ–Ω–¥–æ–º –¥–æ–±—Ä—ã—Ö –¥–µ–ª. üìú",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª, –∫–∞–∫ —ç–ø–æ—Å! –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω—É –≥–ª–∞–≤—É, –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –∫–Ω–∏–≥—É –¥–æ–±—Ä—ã—Ö –¥–µ–ª. üìñ",
                "–í—ã —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∏ –∑–≤–µ–∑–¥–æ–π –Ω–∞ –Ω–µ–±–æ—Å–≤–æ–¥–µ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∏—Å–∫—Ä—É –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ –¥–æ–±—Ä—ã—Ö –¥–µ–ª. ‚≠ê",
                "–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è —Å–µ–≥–æ–¥–Ω—è, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –æ—Å–≤–µ—â–∞–ª–∞ –≥–æ—Ä–æ–¥–∞! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Å–≤–µ—Ç–æ–º, –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –Ω–∞—à "
                "—Ñ–æ–Ω–¥ "
                "—Å–≤–µ—Ç–ª—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. üí°",
                "–í—ã —Å–µ–≥–æ–¥–Ω—è, –∫–∞–∂–µ—Ç—Å—è, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–ª–∏ –º–∏—Ä! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ñ–æ–Ω–¥ "
                "—Å–≤–µ—Ç–ª—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π. üå†",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –ø–æ–∫–æ—Ä—è–ª–∏ –≤–µ—Ä—à–∏–Ω—ã! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º —É—Å–ø–µ—Ö–æ–º, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ "
                "—Ñ–æ–Ω–¥ "
                "—Å–≤–µ—Ç–ª—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π.. üèîÔ∏è",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª, –∫–∞–∫ –∫–∞—Ä–Ω–∞–≤–∞–ª! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º, –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ñ–æ–Ω–¥ —Ä–∞–¥–æ—Å—Ç–Ω—ã—Ö "
                "–º–æ–º–µ–Ω—Ç–æ–≤. üéâ",
                "–í—ã, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞, —Å–µ–≥–æ–¥–Ω—è —Ä–∞–∑–≥–∞–¥—ã–≤–∞–ª–∏ —Ç–∞–π–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –º–æ–º–µ–Ω—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏, "
                "–¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –Ω–∞—à—É –≤—Å–µ–ª–µ–Ω–Ω—É—é –¥–æ–±—Ä–∞. üåå",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª –ø–æ–ª–æ–Ω –º–∞–≥–∏–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–≤–æ—Ä–∏—Ç—å —á—É–¥–µ—Å–∞, –≤–Ω–æ—Å—è —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ñ–æ–Ω–¥ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞. ‚ú®",
                "–ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –≤—ã –ª–µ—Ç–∞–ª–∏ –≤—ã—à–µ –æ–±–ª–∞–∫–æ–≤! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –æ—â—É—â–µ–Ω–∏–µ–º, –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ "
                "—Ñ–æ–Ω–¥ —Å–≤–µ—Ç–ª—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π. üå§Ô∏è",
                "–í—ã —Å–µ–≥–æ–¥–Ω—è, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–∏—Å–∞–ª–∏ —à–µ–¥–µ–≤—Ä—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–≤–æ—Ä–∏—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–æ, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –Ω–∞—à—É "
                "–≥–∞–ª–µ—Ä–µ—é "
                "–¥–æ–±—Ä—ã—Ö –¥–µ–ª. üé®",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª –∫–∞–∫ –≤–µ–ª–∏–∫–∞—è –æ–¥–∏—Å—Å–µ—è! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤—É –æ–± —ç—Ç–æ–º –≤ –Ω–∞—à—É –∫–Ω–∏–≥—É –≤–µ–ª–∏–∫–∏—Ö –∏ –¥–æ–±—Ä—ã—Ö "
                "–¥–µ–ª. üìö",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —É–∫—Ä–æ—â–∞–ª–∏ –±—É—Ä–∏! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å–∏–ª–æ–π, –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ñ–æ–Ω–¥ "
                "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üå™Ô∏è",
                "–í—ã —Å–µ–≥–æ–¥–Ω—è, –∫–∞–∂–µ—Ç—Å—è, —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–ª–∏ –º–∏—Ä! –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å –∏ –∫–∞—Ä—Ç–∏–Ω—É –¥–æ–±—Ä—ã—Ö –¥–µ–ª. üñåÔ∏è",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ç–≤–æ—Ä–∏–ª–∏ —á—É–¥–µ—Å–∞! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –≤–æ–ª—à–µ–±–Ω—É—é –ø—ã–ª—å—Ü—É –≤ —Ñ–æ–Ω–¥ —á—É–¥–µ—Å. üåü",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª –∫–∞–∫ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É–¥–∏–≤–ª—è—Ç—å, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ñ–æ–Ω–¥ —Å–≤–µ—Ç–ª—ã—Ö "
                "—Å–≤–µ—Ä—à–µ–Ω–∏–π.. üé≠",
                "–ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –≤—ã —Å–æ–±–∏—Ä–∞–ª–∏ –∑–≤—ë–∑–¥—ã —Å –Ω–µ–±–µ—Å! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Å–∏—è–Ω–∏–µ–º, –¥–æ–±–∞–≤—å—Ç–µ –∏—Å–∫–æ—Ä–∫—É –≤ —Ñ–æ–Ω–¥ —Å–≤–µ—Ç–ª—ã—Ö "
                "—Å–≤–µ—Ä—à–µ–Ω–∏–π.. ‚ú®",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞, –≤–µ–ª–∏ —Ç–∞–Ω–µ—Ü —Å—É–¥—å–±—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π —à–∞–≥ –≤ –Ω–∞—à —Ç–∞–Ω–µ—Ü "
                "–¥–æ–±—Ä—ã—Ö "
                "–¥–µ–ª. üíÉ",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª –∫–∞–∫ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–ª–µ–¥ –≤ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ –≤–µ–ª–∏–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π. üó∫Ô∏è",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞, –ø–ª–∞–≤–∞–ª–∏ –ø–æ –≤–æ–ª–Ω–∞–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–ª—ã—Ç—å, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ñ–æ–Ω–¥ "
                "–¥–æ–±—Ä—ã—Ö –¥–µ–ª. üåä",
                "–í–∞—à –¥–µ–Ω—å –±—ã–ª –ø–æ–ª–æ–Ω —Å–≤–µ—Ä–∫–∞—é—â–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤! –ó–∞—Å—Ç–∞–≤—å—Ç–µ —Å–≤–µ—Ç–∏—Ç—å –∏ –Ω–∞—à –º–∏—Ä, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –Ω–∞—à —Ñ–æ–Ω–¥ "
                "–¥–æ–±—Ä–∞ "
                "–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üíé",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞, —Ç–≤–æ—Ä–∏–ª–∏ –º—É–∑—ã–∫—É –∂–∏–∑–Ω–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∫–æ–º–ø–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ—é –Ω–æ—Ç—É –≤ –Ω–∞—à—É "
                "—Å–∏–º—Ñ–æ–Ω–∏—é –¥–æ–±—Ä–∞. üé∂",
                "–í—ã —Å–µ–≥–æ–¥–Ω—è, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞–ª–∏ –ø–æ –æ–±–ª–∞–∫–∞–º! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º–∏ –≤—ã—Å–æ—Ç–∞–º–∏, –¥–æ–±–∞–≤–∏–≤ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –Ω–∞—à "
                "—Ñ–æ–Ω–¥ –Ω–∞—Å—Ç–æ—è—â–µ–π –¥–æ–±—Ä–æ—Ç—ã. ‚òÅ "
            ]
            additional_text = random.choice(late_message_variants) + " –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ª—é–±—É—é –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 250‚ÇΩ, " \
                                                                     "–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ –≤ —á–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞!üòâ " \
                                                                     "–°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã–º –≤—Å–µ–º–∏ –≤–∞–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º, " \
                                                                     "–∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ, –¥–∞–∂–µ –º–∏–Ω—É—Ç–Ω–æ–µ, –º—ã –ø–æ–º–æ–≥–∞–µ–º " \
                                                                     "–¥—Ä—É–≥–∏–º üòäüå∏ "
        else:
            # –í–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è –∫—É—Ä—Å–∞
            additional_text = " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–∞—Ç—å –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üòä"
        message_text = f"{report_type} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è: " + ", ".join(user_list) + ". " + additional_text
        bot.send_message(chat_id=chat_id, text=message_text, parse_mode="HTML")

    session.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update, context):
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤ –∫—É—Ä—Å–∞.')


def show_buttons(update, context):
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –≤ –õ–°", callback_data='send_report_in_private')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data='show_participants')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)


def button(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    callback_data = query.data
    bot = context.bot

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id, chat_id, bot):
        query.edit_message_text(text="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback_data
    if callback_data.startswith('remove_'):
        user_id_to_remove = int(callback_data.split('_')[1])
        remove_member_from_chat(chat_id, user_id_to_remove)
        query.edit_message_text(text=f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id_to_remove} —É–¥–∞–ª–µ–Ω.")
    elif callback_data == 'show_participants':
        show_participants(update, context)
    elif callback_data == 'send_report_in_private':
        try:
            send_excel_file_in_private(update, context)
            query.edit_message_text(text="–û—Ç—á—ë—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –õ–°.")
        except Exception as e:
            query.edit_message_text(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: " + str(e))
        return

    logger.info(f"–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: {callback_data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ —á–∞—Ç–µ {chat_id}")


def join(update, context):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    user_name = update.message.from_user.username
    first_name = update.message.from_user.first_name
    last_name = update.message.from_user.last_name


    try:
        response = add_member_to_chat(chat_id, user_id, user_name, first_name, last_name)
        update.message.reply_text(response)
    except Exception as e:
        update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}')


def add_member_to_chat(chat_id, user_id, user_name, first_name, last_name):
    session = Session()
    full_name = f"{first_name or ''} {last_name or ''}".strip()
    member = session.query(ChatMember).filter_by(chat_id=chat_id, user_id=user_id).first()

    if not member:
        # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        logger.info(f"Adding new member: User ID {user_id}, Chat ID {chat_id}, Username {user_name}")
        member = ChatMember(chat_id=chat_id, user_id=user_id, user_name=user_name, full_name=full_name)
        session.add(member)
        session.commit()
        session.close()
        logger.info("New member added successfully.")
        return f'–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!'
    else:
        # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        logger.info(f"Member already exists. Checking for updates: User ID {user_id}, Chat ID {chat_id}")
        if member.user_name != user_name or member.full_name != full_name:
            logger.info(f"Updating member info: Old Username {member.user_name}, New Username {user_name}")
            member.user_name = user_name
            member.full_name = full_name
            session.commit()
            logger.info("Member info updated successfully.")
        session.close()
        return '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.'


def button_callback_handler(update, context):
    query = update.callback_query
    query.answer()

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ `callback_data` —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    user_id_to_add = query.data
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ user_id
    query.edit_message_text(text=f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id_to_add} –¥–æ–±–∞–≤–ª–µ–Ω.")


def add_member(user_id, chat_id):
    session = Session()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    existing_member = session.query(ChatMember).filter_by(user_id=user_id, chat_id=chat_id).first()
    if not existing_member:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        new_member = ChatMember(user_id=user_id, chat_id=chat_id)
        session.add(new_member)
        session.commit()
        session.close()
        return f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω."
    else:
        session.close()
        return f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."


def create_member_buttons(bot, chat_id):
    chat_members = bot.get_chat_administrators(chat_id)
    keyboard = []

    for member in chat_members:
        # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–æ—Ç–∞) –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
        if member.user.id != bot.id:
            button_text = f"{member.user.first_name} {member.user.last_name or ''}"
            callback_data = f"add_{member.user.id}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    return InlineKeyboardMarkup(keyboard)


def send_excel_file_in_private(update, context):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏ user_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    query = update.callback_query
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if query.message:
        chat_id = query.message.chat_id
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –≤ –∫–∞—á–µ—Å—Ç–≤–µ chat_id
        chat_id = user_id

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞
    file_path = create_excel_file(chat_id)

    try:
        with open(file_path, 'rb') as file:
            context.bot.send_document(chat_id=user_id, document=file)
    except Exception as e:
        query.edit_message_text(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: " + str(e))


def send_final_reminder(bot, report_type):
    session = Session()
    current_time = datetime.now(pytz.timezone('Europe/Moscow'))
    today_date = current_time.date()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    if report_type == "—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ":
        condition = (DailyRecord.morning_hashtag == 'False') | (DailyRecord.morning_hashtag == None)
    elif report_type == "–≤–µ—á–µ—Ä–Ω–µ–≥–æ":
        condition = (DailyRecord.evening_hashtag == 'False') | (DailyRecord.evening_hashtag == None)
    elif report_type == "–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ" and current_time.weekday() == 6:
        condition = (DailyRecord.week_hashtag == 'False') | (DailyRecord.week_hashtag == None)
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ DailyRecord –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö ChatMember –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    records = session.query(ChatMember, DailyRecord).join(DailyRecord,
                                                          ChatMember.id == DailyRecord.chat_member_id).filter(
        DailyRecord.date == today_date, condition).all()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø–∞–∑–¥—ã–≤–∞—é—â–∏—Ö —Å –æ—Ç—á–µ—Ç–∞–º–∏, –ø–æ —á–∞—Ç–∞–º
    late_users_by_chat = {}

    for member, record in records:
        late_users_by_chat.setdefault(member.chat_id, []).append(
            create_user_mention(member.user_name, member.user_id, member.full_name))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    for chat_id, users in late_users_by_chat.items():
        if users:
            bot.send_message(chat_id=chat_id,
                             text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç –Ω–∞ —Å–¥–∞—á—É {report_type} –æ—Ç—á—ë—Ç–∞. –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á—ë—Ç: " + ", ".join(
                                 users))

    session.close()


def check_hashtags_and_notify(bot):
    def job_function():
        session = Session()
        logger.info("check_hashtags_and_notify: –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏")
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        today_date = current_time.date()

        morning_end_time = time(10, 0, 0)
        evening_end_time = time(23, 59, 59)

        chats_to_notify = session.query(Chat).all()
        for chat in chats_to_notify:
            logger.info(f"Checking chat: {chat.id}")
            morning_late_users = []
            evening_late_users = []
            week_late_users = []
            all_morning_reports_submitted = True
            is_weekday_sunday = current_time.weekday() == 6

            members = session.query(ChatMember).filter_by(chat_id=chat.id).all()
            for member in members:
                logger.info(f"check_hashtags_and_notify: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.user_id}")
                record = session.query(DailyRecord).filter_by(chat_member_id=member.id, date=today_date).first()

                if not record:
                    record = DailyRecord(chat_member_id=member.id, date=today_date.strftime('%Y-%m-%d'),
                                         morning_hashtag=False, evening_hashtag=False, week_hashtag=False)
                    session.add(record)

                user_mention = create_user_mention(member.user_name, member.user_id, member.full_name)

                if current_time.time() >= morning_end_time and not record.morning_hashtag:
                    morning_late_users.append(user_mention)
                    all_morning_reports_submitted = False
                    record.morning_hashtag = False

                if current_time.time() >= evening_end_time and not record.evening_hashtag:
                    evening_late_users.append(user_mention)
                    record.evening_hashtag = False

                if current_time.weekday() == 6 and (not record or not record.week_hashtag):
                    week_late_users.append(user_mention)
                    if record:
                        record.week_hashtag = False

            session.commit()
        session.close()
        logger.info("check_hashtags_and_notify: –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏")

    return job_function


def send_hour_reminder(bot, chat_id, report_type):
    bot.send_message(chat_id=chat_id,
                     text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å –Ω–∞ —Å–¥–∞—á—É {report_type} –æ—Ç—á—ë—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à –æ—Ç—á—ë—Ç.")


def send_fifteen_minute_reminder(bot, chat_id, report_type):
    try:
        session = Session()
        current_time = datetime.now(pytz.timezone('Europe/Moscow'))
        today_date = current_time.date()
        late_users = []
        members = session.query(ChatMember).filter_by(chat_id=chat_id).all()

        for member in members:
            record = session.query(DailyRecord).filter_by(chat_member_id=member.id, date=today_date).first()
            if not record or (report_type == "—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ" and record.morning_hashtag == "0") or (
                    report_type == "–≤–µ—á–µ—Ä–Ω–µ–≥–æ" and record.evening_hashtag == "0"):
                user_mention = create_user_mention(member.user_name, member.user_id, member.full_name)
                late_users.append(user_mention)

        if late_users:
            message_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç –Ω–∞ —Å–¥–∞—á—É {report_type} –æ—Ç—á—ë—Ç–∞. –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á—ë—Ç: " + ", ".join(
                late_users)
            bot.send_message(chat_id=chat_id, text=message_text, parse_mode="HTML")
        else:
            logger.info(f"No late users for {report_type} report in chat {chat_id}")

        session.close()
    except Exception as e:
        session.close()
        logger.error(f"Error in send_fifteen_minute_reminder: {e}")


def reschedule_jobs(scheduler, bot):
    try:
        session = Session()
        chat_list = session.query(Chat).all()

        moscow_tz = pytz.timezone('Europe/Moscow')

        for chat in chat_list:
            chat_id = chat.id

            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            morning_time = time(10, 0)  # –£—Ç—Ä–µ–Ω–Ω–∏–π –¥–µ–¥–ª–∞–π–Ω –≤ 10:00
            evening_time = time(23, 59)  # –í–µ—á–µ—Ä–Ω–∏–π –¥–µ–¥–ª–∞–π–Ω –≤ 23:59
            week_reminder_time = time(23, 59)  # –ù–µ–¥–µ–ª—å–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ 17:00 –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–¥–∞–Ω–∏–π
            morning_hour_reminder_id = f"morning_hour_reminder_{chat_id}"
            morning_fifteen_minute_reminder_id = f"morning_15min_reminder_{chat_id}"
            evening_hour_reminder_id = f"evening_hour_reminder_{chat_id}"
            evening_fifteen_minute_reminder_id = f"evening_15min_reminder_{chat_id}"
            week_fifteen_minute_reminder_id = f"week_15min_reminder_{chat_id}"
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            reports_notify_morning_id = f"reports_notify_morning_{chat_id}"
            reports_notify_evening_id = f"reports_notify_evening_{chat_id}"
            reports_notify_week_id = f"reports_notify_week_{chat_id}"
            morning_job_id = f"hashtags_notify_morning_{chat_id}"
            evening_job_id = f"hashtags_notify_evening_{chat_id}"
            week_job_id = f"hashtags_notify_week_{chat_id}"

            # –†–∞—Å—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            morning_hour_reminder = (datetime.combine(datetime.today(), morning_time) - timedelta(hours=1)).time()
            morning_fifteen_minute_reminder = (
                    datetime.combine(datetime.today(), morning_time) - timedelta(minutes=15)).time()
            evening_hour_reminder = (datetime.combine(datetime.today(), evening_time) - timedelta(hours=1)).time()
            evening_fifteen_minute_reminder = (
                    datetime.combine(datetime.today(), evening_time) - timedelta(minutes=15)).time()
            # week_hour_reminder = (datetime.combine(datetime.today(), week_reminder_time) - timedelta(hours=1)).time()
            week_fifteen_minute_reminder = (
                    datetime.combine(datetime.today(), week_reminder_time) - timedelta(minutes=15)).time()

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if not scheduler.get_job(morning_hour_reminder_id):
                scheduler.add_job(send_hour_reminder, 'cron', hour=morning_hour_reminder.hour,
                                      minute=morning_hour_reminder.minute, args=(bot, chat_id, "—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ"),
                                  day_of_week='mon,tue,wed,thu,fri,sat',
                                      timezone=moscow_tz)
            if not scheduler.get_job(morning_fifteen_minute_reminder_id):
                scheduler.add_job(send_fifteen_minute_reminder, 'cron', hour=morning_fifteen_minute_reminder.hour,
                                      minute=morning_fifteen_minute_reminder.minute, args=(bot, chat_id, "—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ"),
                                  day_of_week='mon,tue,wed,thu,fri,sat',
                                      timezone=moscow_tz)
            if not scheduler.get_job(evening_hour_reminder_id):
                scheduler.add_job(send_hour_reminder, 'cron', hour=evening_hour_reminder.hour,
                                      minute=evening_hour_reminder.minute, args=(bot, chat_id, "–≤–µ—á–µ—Ä–Ω–µ–≥–æ"),
                                  day_of_week='mon,tue,wed,thu,fri,sat',
                                      timezone=moscow_tz)
            if not scheduler.get_job(evening_fifteen_minute_reminder_id):
                scheduler.add_job(send_fifteen_minute_reminder, 'cron', hour=evening_fifteen_minute_reminder.hour,
                                      minute=evening_fifteen_minute_reminder.minute, args=(bot, chat_id, "–≤–µ—á–µ—Ä–Ω–µ–≥–æ"),
                                  day_of_week='mon,tue,wed,thu,fri,sat',
                                      timezone=moscow_tz)
            if not scheduler.get_job(week_fifteen_minute_reminder_id):
                scheduler.add_job(send_fifteen_minute_reminder, 'cron', day_of_week='sun',
                                      hour=week_fifteen_minute_reminder.hour, minute=week_fifteen_minute_reminder.minute,
                                      args=(bot, chat_id, "–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ"), timezone=moscow_tz)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            # job_function = check_hashtags_and_notify(bot)
        if not scheduler.get_job(morning_job_id):
            scheduler.add_job(check_hashtags_and_notify, 'cron', id=morning_job_id,
                                  day_of_week='mon,tue,wed,thu,fri,sat', hour=10, minute=1, args=[bot],
                                  timezone=moscow_tz)

        if not scheduler.get_job(evening_job_id):
            scheduler.add_job(check_hashtags_and_notify(bot), 'cron', id=evening_job_id,
                                  day_of_week='mon,tue,wed,thu,fri,sat', hour=23, minute=59, second=59,
                                  timezone=moscow_tz)

        if not scheduler.get_job(week_job_id):
            scheduler.add_job(check_hashtags_and_notify(bot), 'cron', id=week_job_id, day_of_week='sun', hour=23, minute=59,
                                  timezone=moscow_tz)

        if not scheduler.get_job(reports_notify_morning_id):
            scheduler.add_job(check_reports_and_notify, 'cron', id=reports_notify_morning_id,
                                  day_of_week='mon,tue,wed,thu,fri,sat', hour=10, minute=1, args=[bot],
                                  timezone=moscow_tz)

        if not scheduler.get_job(reports_notify_evening_id):
            scheduler.add_job(lambda: check_reports_and_notify(bot), 'cron', id=reports_notify_evening_id,
                                      day_of_week='mon,tue,wed,thu,fri,sat', hour=23, minute=59, second=59,
                                      timezone=moscow_tz)

        if not scheduler.get_job(reports_notify_week_id):
            scheduler.add_job(lambda: check_reports_and_notify(bot), 'cron', id=reports_notify_week_id,
                                      day_of_week='sun', hour=23, minute=59, second=59, timezone=moscow_tz)

        session.close()
        logger.info("reschedule_jobs: –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        session.close()
        logger.error(f"reschedule_jobs: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")


def is_valid_week_report(date_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ–º."""
    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    return date_obj.weekday() == 6  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ


def cancel(update, context):
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END


def sanitize_sheet_title(title):
    invalid_chars = ['*', '/', '\\', '?', ':', '[', ']']
    for char in invalid_chars:
        title = title.replace(char, '')  # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    return title[:31]  # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ 31 —Å–∏–º–≤–æ–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ


def create_excel_file(chat_id):
    session = Session()

    members = session.query(ChatMember).filter(ChatMember.chat_id == chat_id).order_by(ChatMember.full_name).all()
    wb = Workbook()
    wb.remove(wb.active)

    header_font = Font(bold=True)
    green_fill = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')
    red_fill = PatternFill(start_color='FF0000', end_color='FF0000', fill_type='solid')
    yellow_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')
    thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'),
                         bottom=Side(style='thin'))

    for member in members:
        raw_title = (member.full_name or member.user_name or str(member.user_id))[:31]
        sheet_title = sanitize_sheet_title(raw_title)
        ws = wb.create_sheet(title=sheet_title)

        headers = ["–î–∞—Ç–∞", "–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç", "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç", "–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç", "–®—Ç—Ä–∞—Ñ", "–î–∞—Ç–∞ —É–ø–ª–∞—Ç—ã —à—Ç—Ä–∞—Ñ–∞",
                   "–ó–∞ –æ—Ç—á—ë—Ç"]
        ws.append(headers)

        for cell in ws[1]:
            cell.font = header_font
            cell.border = thin_border

        records = session.query(DailyRecord).filter_by(chat_member_id=member.id).order_by(DailyRecord.date.desc()).all()
        fines = session.query(Fine).filter_by(chat_member_id=member.id).order_by(Fine.date_paid).all()

        for record in records:
            date_obj = datetime.strptime(record.date, '%Y-%m-%d').date()
            is_weekday_sunday = date_obj.weekday() == 6  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ª–∏ —ç—Ç–æ

            morning_report = "" if is_weekday_sunday else record.morning_hashtag
            evening_report = "" if is_weekday_sunday else record.evening_hashtag
            week_report = record.week_hashtag if is_weekday_sunday else ""

            row = [record.date, morning_report, evening_report, week_report, "", "", ""]
            ws.append(row)

            for cell in ws[ws.max_row]:
                cell.border = thin_border
                if cell.column_letter in ['B', 'C', 'D']:
                    if cell.value == '1':
                        cell.fill = green_fill
                    elif cell.value == '0':
                        cell.fill = red_fill
                    elif cell.value == 'fine':
                        cell.fill = yellow_fill

        for fine in fines:
            fine_row = ["", "", "", "", "–®—Ç—Ä–∞—Ñ", fine.date_paid, fine.report_type]
            ws.append(fine_row)
            for cell in ws[ws.max_row]:
                cell.border = thin_border
                cell.fill = yellow_fill

        for col in ['A', 'B', 'C', 'D', 'E', 'F', 'G']:
            ws.column_dimensions[col].width = 20

    file_path = 'report.xlsx'
    wb.save(file_path)
    session.close()
    return file_path


def send_excel_file(update, context):
    chat_id = update.message.chat_id
    file_path = create_excel_file(chat_id)
    with open(file_path, 'rb') as file:
        context.bot.send_document(chat_id=chat_id, document=file)


def add_member_to_chat(chat_id, user_id, user_name, first_name, last_name):
    session = Session()
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏, –∑–∞–º–µ–Ω—è—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª
    full_name = f"{first_name or ''} {last_name or ''}".strip()
    member = session.query(ChatMember).filter_by(chat_id=chat_id, user_id=user_id).first()
    if not member:
        member = ChatMember(chat_id=chat_id, user_id=user_id, user_name=user_name, full_name=full_name)
        session.add(member)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        member.full_name = full_name
    session.commit()
    session.close()


def remove_member_from_chat(chat_id, user_id):
    session = Session()
    member = session.query(ChatMember).filter_by(chat_id=chat_id, user_id=user_id).first()
    if member:
        session.delete(member)
        session.commit()
    session.close()


def get_course_start_date(chat_id):
    session = Session()
    chat = session.query(Chat).filter_by(id=chat_id).first()
    if chat:
        return chat.start_date
    session.close()
    return None


def set_course_start_date(chat_id, start_date):
    session = Session()
    chat = session.query(Chat).filter_by(id=chat_id).first()
    if not chat:
        chat = Chat(id=chat_id, start_date=start_date)
        session.add(chat)
    else:
        chat.start_date = start_date
    session.commit()
    session.close()


def set_start_date(update, context):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    bot = context.bot

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id, chat_id, bot):
        update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞.")
        return ConversationHandler.END

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        start_date_str = context.args[0]
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        set_course_start_date(chat_id, start_date)
        update.message.reply_text(f'–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {start_date}.')
    except (IndexError, ValueError):
        update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.')

    return ConversationHandler.END


def show_participants(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    session = Session()
    members = session.query(ChatMember).filter_by(chat_id=chat_id).all()
    keyboard = []

    for member in members:
        button_text = f"{member.user_name or member.user_id}"
        callback_data = f"remove_{member.user_id}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
    session.close()


def get_all_chats():
    session = Session()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ Session —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
    chats = session.query(Settings).all()
    session.close()
    return chats


def remove_member(update, context):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    bot = context.bot

    if not is_admin(user_id, chat_id, bot):
        update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
        return

    try:
        user_id_to_remove = int(context.args[0])
        remove_member_from_chat(chat_id, user_id_to_remove)
        update.message.reply_text(f'–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id_to_remove} —É–¥–∞–ª–µ–Ω.')
    except (IndexError, ValueError):
        update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove <user_id>.')


def handle_new_member(update, context, scheduler, bot):
    for member in update.message.new_chat_members:
        add_member_to_chat(update.message.chat_id, member.id, member.username, member.first_name, member.last_name)
        reschedule_jobs(scheduler, bot)
        check_and_schedule_messages(scheduler, bot)
        check_hashtags_and_notify(bot)


def handle_left_member(update, context):
    remove_member_from_chat(update.message.chat_id, update.message.left_chat_member.id)


def handle_message(update, context):
    if update.edited_message:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = update.edited_message.chat.id
        user_id = update.edited_message.from_user.id
        user_name = update.edited_message.from_user.username
        first_name = update.edited_message.from_user.first_name
        last_name = update.edited_message.from_user.last_name or ""
        new_user_name = update.edited_message.from_user.username
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id
        user_name = update.message.from_user.username
        first_name = update.message.from_user.first_name
        last_name = update.message.from_user.last_name or ""
        new_user_name = update.message.from_user.username

    try:
        chat_member = context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status in ['administrator', 'creator']:
            logger.info(f"User {user_id} in chat {chat_id} is an admin or creator, skipping database addition.")
            return
    except Exception as e:
        logger.error(f"Error checking user status in chat {chat_id} for user {user_id}: {e}")

    session = Session()
    member = session.query(ChatMember).filter_by(chat_id=chat_id, user_id=user_id).first()
    if member:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ user_name
        if member.user_name != new_user_name:
            member.user_name = new_user_name
            session.commit()
    session.close()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    message = update.message if update.message else update.edited_message

    text_to_process = None
    if message:
        if message.text:
            text_to_process = message.text.lower()
        elif message.caption:
            text_to_process = message.caption.lower()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info(f"Received a message from chat {chat_id}, user {user_id}")
    logger.info(f"Text to process: '{text_to_process}'")

    moscow_tz = pytz.timezone('Europe/Moscow')
    current_time = datetime.now(moscow_tz)
    today_date = current_time.date()
    start_date_str = get_course_start_date(chat_id)

    if start_date_str:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        current_time = datetime.now(pytz.timezone('Europe/Moscow'))
        today_date = current_time.date()

        # –†–∞—Å—á–µ—Ç –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –∏ –Ω–µ–¥–µ–ª–∏
        day_number = (today_date - start_date).days + 1
        week_number = (day_number - 1) // 7 + 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 9 –Ω–µ–¥–µ–ª—å (63 –¥–Ω—è)
        if 1 <= day_number <= 63:
            possible_hashtags = [
                f"#–æ—É{day_number}",
                f"#–æ–≤{day_number}",
                f"#–Ω–µ–¥–µ–ª—è{week_number}",
            ]

            if text_to_process:
                logger.info(f"Received a message from chat {chat_id}, user {user_id}")
                logger.info(f"Text to process: '{text_to_process}'")

            else:
                logger.info("The message does not contain text or caption.")

            if any(hashtag in text_to_process for hashtag in possible_hashtags):
                logger.info(f"Hashtag found in text: {text_to_process}")

                add_member_to_chat(chat_id, user_id, user_name, first_name, last_name)
                settings = get_settings(chat_id)

                morning_tag = settings.morning_hashtag if settings.morning_hashtag else "#–æ—É"
                evening_tag = settings.evening_hashtag if settings.evening_hashtag else "#–æ–≤"
                week_tag = settings.week_hashtag if settings.week_hashtag else "#–Ω–µ–¥–µ–ª—è"

                morning_deadline = time(10, 1)
                evening_deadline = time(23, 59)

                if f"{morning_tag}{day_number}" in text_to_process and current_time.time() < morning_deadline:
                    update_daily_record(chat_id, user_id, today_date.strftime('%Y-%m-%d'), morning_hashtag=True)
                elif f"{evening_tag}{day_number}" in text_to_process and current_time.time() < evening_deadline:
                    update_daily_record(chat_id, user_id, today_date.strftime('%Y-%m-%d'), evening_hashtag=True)
                elif f"{week_tag}{week_number}" in text_to_process and current_time.weekday() == 6:
                    update_daily_record(chat_id, user_id, today_date.strftime('%Y-%m-%d'), week_hashtag=True)

                if today_date != datetime.now(moscow_tz).date():
                    logger.info("The message is from a previous day, ignoring.")
                    return

                else:
                    logger.info("No fine hashtag found in the text.")
                return
            else:
                logger.info("No relevant hashtag found in the text.")
        else:
            logger.info("The message date is outside the 9-week range.")
    else:
        logger.info("Start date is not set for the chat.")


def send_course_completion_message(bot, chat_id):
    message = (
        "–°–µ—Ä–¥–µ—á–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ –º–∏—Ä –∑–Ω–∞–Ω–∏–π! üåü –í–∞—à–∞ "
        "—Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ—Ä–∞–∂–∞—é—Ç –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ. üöÄ –ú—ã "
        "–±—É—Ä–Ω–æ –∞–ø–ª–æ–¥–∏—Ä—É–µ–º –≤–∞—à–∏–º —É—Å–ø–µ—Ö–∞–º –∏ –≥–æ—Ä–¥–∏–º—Å—è –∫–∞–∂–¥—ã–º –∏–∑ –≤–∞—Å! –ü—É—Å—Ç—å –¥–æ—Ä–æ–≥–∞ –≤–ø–µ—Ä–µ–¥–∏ –±—É–¥–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∞ —Å–≤–µ—Ç–æ–º —Ä–∞–¥–æ—Å—Ç–∏, "
        "–±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ –Ω–µ—É—Å—Ç–∞–Ω–Ω–æ–≥–æ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º. üåàüåü –ñ–µ–ª–∞–µ–º –≤–∞–º —Ü–≤–µ—Ç—É—â–µ–≥–æ —Å—á–∞—Å—Ç—å—è, –æ—Å–ª–µ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö "
        "—É—Å–ø–µ—Ö–æ–≤ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –∏ –ø—É—Å—Ç—å –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —à–∞–≥ "
        "–±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –∏ —Ä–∞–¥–æ—Å—Ç—å—é! üéâ –í—ã - –Ω–∞—Å—Ç–æ—è—â–∏–µ –≥–µ—Ä–æ–∏ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏, –∏ –≤–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç —Ç–æ–ª—å–∫–æ "
        "—Å–∞–º—ã–µ —è—Ä–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã! üí´ "
    )
    bot.send_message(chat_id=chat_id, text=message)


def schedule_course_completion_message(scheduler, bot, chat_id, start_date_str):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
    moscow_tz = timezone('Europe/Moscow')
    start_date = datetime.strptime(start_date_str, '%Y-%m-%d')

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞ (62 –¥–Ω—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞)
    completion_date = start_date + timedelta(days=62)

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    send_time = datetime.combine(completion_date, time(18, 0)).astimezone(pytz.timezone('Europe/Moscow'))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(send_course_completion_message, 'date', run_date=send_time, args=(bot, chat_id),
                      timezone=moscow_tz)


def check_and_schedule_messages(scheduler, bot):
    session = Session()
    chats = session.query(Chat).all()
    for chat in chats:
        if chat.start_date:
            schedule_course_completion_message(scheduler, bot, chat.id, chat.start_date)
    session.close()


def error(update, context):
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def create_conversation_handler(scheduler, updater):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("buttons", show_buttons)],
        states={
            'SET_START_DATE': [MessageHandler(Filters.text & ~Filters.command, set_start_date)],
            'REMOVE_MEMBER': [MessageHandler(Filters.text & ~Filters.command, remove_member)],

        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    return conv_handler


def test_job():
    print("Test job executed", datetime.now())


def main():
    # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    TOKEN = ''

    updater = Updater(TOKEN, use_context=True)
    bot = updater.bot
    # check_hashtags_and_notify(bot)
    dp = updater.dispatcher
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ—à—Ç–µ–≥–æ–≤
    scheduler = BackgroundScheduler()
    scheduler.start()
    # morning_check_time = time(10, 1)  # –≤ 10:01 —É—Ç—Ä–∞
    # evening_check_time = time(23, 59, 59)  # 23:59:59 –≤–µ—á–µ—Ä–∞
    # week_check_time = time(23, 59, 59)
    #
    moscow_tz = pytz.timezone('Europe/Moscow')
    #
    # # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –∏ 23:59 –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    # job_function = check_hashtags_and_notify(bot)
    # scheduler.add_job(job_function, 'cron', day_of_week='mon,tue,wed,thu,fri,sat', hour=10, minute=1,
    #                   timezone=moscow_tz)
    # scheduler.add_job(job_function, 'cron', day_of_week='mon,tue,wed,thu,fri,sat', hour=23, minute=59, second=59,
    #                   timezone=moscow_tz)
    # scheduler.add_job(job_function, 'cron', day_of_week='sun', hour=23, minute=59, timezone=moscow_tz)
    # scheduler.add_job(lambda: check_reports_and_notify(bot), 'cron', day_of_week='mon,tue,wed,thu,fri,sat',
    #                   hour=morning_check_time.hour,
    #                   minute=morning_check_time.minute, timezone=pytz.timezone('Europe/Moscow'))
    # scheduler.add_job(lambda: check_reports_and_notify(bot), 'cron', day_of_week='mon,tue,wed,thu,fri,sat',
    #                   hour=evening_check_time.hour,
    #                   minute=evening_check_time.minute, second=evening_check_time.second,
    #                   timezone=pytz.timezone('Europe/Moscow'))
    # scheduler.add_job(lambda: check_reports_and_notify(bot), 'cron', day_of_week='sun', hour=week_check_time.hour,
    #                   minute=week_check_time.minute, second=week_check_time.second,
    #                   timezone=pytz.timezone('Europe/Moscow'))

    custom_handle_new_member = partial(handle_new_member, scheduler=scheduler, bot=bot)
    # check_reports_and_notify(bot)
    conv_handler = create_conversation_handler(scheduler, updater)
    reschedule_jobs(scheduler, bot)
    check_and_schedule_messages(scheduler, bot)
    # check_hashtags_and_notify(bot)
    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("setstartdate", set_start_date, pass_args=True))
    dp.add_handler(CommandHandler("remove", remove_member, pass_args=True))
    dp.add_handler(CommandHandler('join', join))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(
        MessageHandler(Filters.update.message & (Filters.text | Filters.caption) & ~Filters.command, handle_message))
    dp.add_handler(MessageHandler(Filters.update.edited_message, handle_message))
    # dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, handle_new_member))
    dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, custom_handle_new_member))
    dp.add_handler(MessageHandler(Filters.status_update.left_chat_member, handle_left_member))
    dp.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
